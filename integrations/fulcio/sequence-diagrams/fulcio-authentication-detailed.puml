@startuml

!include ../../../defaults.iuml

FA_USER(Developer,Developer,participant)
GOV_FINGERPRINT(Authenticator,Authenticator,participant)
FA_LAPTOP(Client,Client,participant)
FA5_SERVER(Server,Server,participant)
FA5_CERTIFICATE(Fulcio,Fulcio\n(Relying Party),participant)
FA5_NEWSPAPER(Rekor,Rekor\n(Transparency Log),participant)

title Fulcio Authentication with FIDO (Passkey) to Certificate

autonumber
group Request Certificate
    Developer -> Fulcio : Request Certificate
    Fulcio -> Fulcio : Checks if developer is logged in
    Fulcio -> IDP : Req
    group Authenicate with OpenID Connect (IDP)
        group Fast Identity Online (FIDO2) Validation
            group Client-To-Authenticator Protocol (CTAP) Flow
                group W3C Web Authentication Specification (WebAuthN)

                end
            end
        end
    end
    Fulcio -> IDP : Validates JWT Token
    Fulcio -> Fulcio: Gerenerates Certificate with\nurl (jwt issuer), contact (jwt subject), type: oidc, acr:, amr:, authtime:
    group Generate Certificate
        group Publish Signing Certificate to Rekor

            group Append Certificate to Transparency Log

            end

        end
        group Return Siging Certificate to User

        end
        group Publish Signed Artifact

        end
    end
    Consumer -> Client: User Navigates to $fido_url
    Client -> Server: Client requests login page
    Server -> Client: Returns login page
    Client -> Consumer: Returns login page
    Consumer -> Client: Clicks login button
    Client  -> Server: Credential sent
    Client -> Server: Get challenge
    Server -> Client: Challenge
    Client -> Client: Create request parameters
    Client -> Consumer: Challenge + get credentials command +\nrequested credentials id (optional)
    Client -> Consumer: Prompt appears\n"Please complete biometric authentication\n(finger, look, speak, etc.)"
    Client -> Authenticator: Authorization request sent
    Authenticator -> Authenticator: Verify parameters
    Authenticator -> Authenticator: Match credential
    Authenticator -> Consumer: Prompt for biometric gesture
    Consumer -> Authenticator: Approves prompt with finger/look/speak/etc.
    Consumer -> Authenticator: Asserts authorization gesture
    Authenticator -> Client: Signed challenge
    Client -> Server: Signed challenge
    Server -> Server: Look up public key
    Server -> Server: Verify assertion
    Server -> Client: Logged in
    Client -> Consumer: Logged in
end

@enduml